version: '3.8'
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: app
    restart: always
    ports:
      - '4001:4000'
    depends_on:
      - postgres
      - redis
    env_file:
      - .env.docker
    environment:
      PORT: ${PORT}
      PG_HOST: postgres
      PG_PORT: db-postgres
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
      PG_DB_NAME: ${PG_DB_NAME}

      DATABASE_URL: ${DATABASE_URL}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      POOL_SIZE: ${POOL_SIZE}
    networks:
      - app-network

  postgres:
    image: postgres:latest
    container_name: db-postgres
    healthcheck:
      test: [ 'CMD', 'pg_isready', '-q', '-d', 'postgres', '-U', 'postgres' ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      - POSTGRES_INITDB_ARGS="--encoding=UTF-8"
    ports:
      - '5432:5432'
    expose:
      - 5432
    volumes:
      - database:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

  redis:
    image: redis:latest
    restart: always
    container_name: db-redis
    command: redis-server --requirepass redis
    environment:
      - REDIS_REPLICATION_MODE=master
    ports:
      - '6379:6379'
    expose:
      - 6379
    volumes:
      - dbredis:/var/lib/redis/data
    networks:
      - app-network
networks:
  app-network:
    driver: bridge
volumes:
  database:
  dbredis:
